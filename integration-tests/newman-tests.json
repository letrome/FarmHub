{
	"info": {
		"_postman_id": "9a122e4d-628e-4659-8769-82b17c96c9cc",
		"name": "Integration testing",
		"description": "Integration tests of the project FarmHub. It contains integration tests for the services:\n\n- Species\n- Animals\n    \n\nYou can run them directly from this project:\n\n- \"Run collection\" to launch all the integration tests\n- \"Run folder\" to launch integration tests of a specific service\n    \n\nAlternatively, you can execute them from the FarmHub code repository. From the root of the project, given a specific service `$SERVICE`:\n\n``` bash\n$SERVICE/integration-tests/run.sh\n\n ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7556688",
		"_collection_link": "https://www.postman.com/letrome/workspace/farmhub/collection/7556688-9a122e4d-628e-4659-8769-82b17c96c9cc?action=share&source=collection_link&creator=7556688"
	},
	"item": [
		{
			"name": "Animals",
			"item": [
				{
					"name": "List all",
					"item": [
						{
							"name": "List all animals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of entries is 24\", () => {",
											"  pm.expect(responseJson).to.have.lengthOf(24);",
											"});",
											"",
											"responseJson.forEach((entry, index) => {",
											"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
											"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"specie\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"farmer\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"picture\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals"
									]
								},
								"description": "List all animals"
							},
							"response": []
						}
					],
					"description": "**Execute** list all animals\n\n**Return** all animals"
				},
				{
					"name": "Get existing animal",
					"item": [
						{
							"name": "Get an animal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"animal1\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Marguerite\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1959-12-16\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie1\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture1\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals/animal1",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"animal1"
									]
								},
								"description": "Get an animal by id"
							},
							"response": []
						}
					],
					"description": "**Execute** get an existing animal by its id\n\n**Return** the requested animal"
				},
				{
					"name": "Get non-existing animal",
					"item": [
						{
							"name": "Get an animal by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Animal not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals/animal0",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"animal0"
									]
								},
								"description": "Get an animal by id"
							},
							"response": []
						}
					],
					"description": "**Execute** get a non-existing animal by its id\n\n**Return** an error 404"
				},
				{
					"name": "Create and get an animal",
					"item": [
						{
							"name": "Create an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals"
									]
								},
								"description": "Create an animal"
							},
							"response": []
						},
						{
							"name": "Get an animal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"animal_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals/{{animal_id}}",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"{{animal_id}}"
									]
								},
								"description": "Get an animal by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"animal_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/reset",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset animals to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create an animal\n\n**Then execute** Get this animal\n\n**Return** this animal"
				},
				{
					"name": "Create and list all animals",
					"item": [
						{
							"name": "Create an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals"
									]
								},
								"description": "Create an animal"
							},
							"response": []
						},
						{
							"name": "List all animals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"const id = pm.collectionVariables.get(\"animal_id\");",
											"const newAnimal = responseJson.find(animal => animal.id === id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of entries is 25\", () => {",
											"  pm.expect(responseJson).to.have.lengthOf(25);",
											"});",
											"",
											"responseJson.forEach((entry, index) => {",
											"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
											"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"specie\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"farmer\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"picture\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"  });",
											"});",
											"",
											"pm.test(\"Verify that the id of the new animal is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"animal_id\");",
											"  pm.expect(newAnimal.id).to.eql(id);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the name of the new animal is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(newAnimal.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that the birth_date of the new anmal is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(newAnimal.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that the specie of the new animal is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(newAnimal.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that the farmer of the new animal is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(newAnimal.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that the status of the new animal is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(newAnimal.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that the picture of the new animal is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(newAnimal.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals"
									]
								},
								"description": "List all animals"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"animal_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/reset",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset animals to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create an animal\n\n**Then execute** List all animals\n\n**Return** default animals plus this animal"
				},
				{
					"name": "Create and delete an animal",
					"item": [
						{
							"name": "Create an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals"
									]
								},
								"description": "Create an animal"
							},
							"response": []
						},
						{
							"name": "Delete an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"animal_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals/{{animal_id}}",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"{{animal_id}}"
									]
								},
								"description": "Delete an animal"
							},
							"response": []
						},
						{
							"name": "Get an animal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Animal not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals/{{animal_id}}",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"{{animal_id}}"
									]
								},
								"description": "Get an animal by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"animal_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/reset",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset animals to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create an animal\n\n**Then execute** Delete this animal\n\n**Then execute** Get this animal\n\n**Return** an error 404"
				},
				{
					"name": "Two consecutive deletes",
					"item": [
						{
							"name": "Create an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals"
									]
								},
								"description": "Create an animal"
							},
							"response": []
						},
						{
							"name": "Delete an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"animal_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals/animal25",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"animal25"
									]
								},
								"description": "Delete an animal"
							},
							"response": []
						},
						{
							"name": "Delete an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Animal not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals/animal25",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"animal25"
									]
								},
								"description": "Delete an animal"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"animal_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/reset",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset animals to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create an animal\n\n**Then execute** Delete this animal\n\n**Then execute** Delete this animal\n\n**Return** an error 404"
				},
				{
					"name": "Create and update an animal",
					"item": [
						{
							"name": "Create an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals"
									]
								},
								"description": "Create an animal"
							},
							"response": []
						},
						{
							"name": "Update an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"animal_id\"));",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Rapidash\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1996-02-27\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer2\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture33\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Rapidash\",\n    \"birth_date\": \"1996-02-27\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer2\",\n    \"status\": \"present\",\n    \"picture\": \"picture33\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals/{{animal_id}}",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"{{animal_id}}"
									]
								},
								"description": "Update an animal"
							},
							"response": []
						},
						{
							"name": "Get an animal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"animal_id\"));",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Rapidash\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1996-02-27\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer2\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture33\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals/{{animal_id}}",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"{{animal_id}}"
									]
								},
								"description": "Get an animal by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"animal_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/reset",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset animals to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create an animal\n\n**Then execute** Update this animal\n\n**Then execute** Get this animal\n\n**Return** the animal updated"
				},
				{
					"name": "Create and patch an animal",
					"item": [
						{
							"name": "Create an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals"
									]
								},
								"description": "Create an animal"
							},
							"response": []
						},
						{
							"name": "Patch an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"animal_id\"));",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"gone\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals/{{animal_id}}",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"{{animal_id}}"
									]
								},
								"description": "Update specific fields of an animal"
							},
							"response": []
						},
						{
							"name": "Get an animal by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"animal_id\"));",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Poulain\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1848-02-01\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specie is correct\", function () {",
											"    const specie = \"specie4\";",
											"    pm.expect(responseJson.specie).to.eql(specie);",
											"});",
											"",
											"pm.test(\"Verify that farmer is correct\", function () {",
											"    const farmer = \"farmer1\";",
											"    pm.expect(responseJson.farmer).to.eql(farmer);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture32\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/animals/{{animal_id}}",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"{{animal_id}}"
									]
								},
								"description": "Get an animal by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"animal_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{animals_url}}/reset",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset animals to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create an animal\n\n**Then execute** Patch this animal\n\n**Then execute** Get this animal\n\n**Return** the animal patched"
				},
				{
					"name": "Update a non-existing animal",
					"item": [
						{
							"name": "Update an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Animal not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Rapidash\",\n    \"birth_date\": \"1996-02-27\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer2\",\n    \"status\": \"present\",\n    \"picture\": \"picture33\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals/animal0",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"animal0"
									]
								},
								"description": "Update an animal"
							},
							"response": []
						}
					],
					"description": "**Execute** Update an animal\n\n**Return** an error 404"
				},
				{
					"name": "Patch a non-existing animal",
					"item": [
						{
							"name": "Patch an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											"pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Animal not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"gone\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{animals_url}}/animals/animal0",
									"host": [
										"{{animals_url}}"
									],
									"path": [
										"animals",
										"animal0"
									]
								},
								"description": "Update specific fields of an animal"
							},
							"response": []
						}
					],
					"description": "**Execute** Patch an animal\n\n**Return** an error 404"
				}
			],
			"description": "Integration tests of the service \"Animals\"."
		},
		{
			"name": "Species",
			"item": [
				{
					"name": "List all",
					"item": [
						{
							"name": "List all species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of entries is 6\", () => {",
											"  pm.expect(responseJson).to.have.lengthOf(6);",
											"});",
											"",
											"responseJson.forEach((entry, index) => {",
											"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
											"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{species_url}}/species",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species"
									]
								},
								"description": "List all species"
							},
							"response": []
						}
					],
					"description": "**Execute** list all species\n\n**Return** all species"
				},
				{
					"name": "Get existing specie",
					"item": [
						{
							"name": "Get a specie by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"specie1\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Cow\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The cow is a domesticated herbivorous mammal.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Grasslands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{species_url}}/species/specie1",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"specie1"
									]
								},
								"description": "Get a specie by id"
							},
							"response": []
						}
					],
					"description": "**Execute** get an existing specie by its id\n\n**Return** the requested specie"
				},
				{
					"name": "Get non-existing specie",
					"item": [
						{
							"name": "Get a specie by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Specie not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{species_url}}/species/specie0",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"specie0"
									]
								},
								"description": "Get a specie by id"
							},
							"response": []
						}
					],
					"description": "**Execute** get a non-existing specie by its id\n\n**Return** an error 404"
				},
				{
					"name": "Create and get a specie",
					"item": [
						{
							"name": "Create a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"specie_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Goose\",\n\"description\": \"The goose is a waterfowl bird known for its honking sound.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Wetlands\",\n\"conservation_status\": \"Least Concern\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species"
									]
								},
								"description": "Create a specie"
							},
							"response": []
						},
						{
							"name": "Get a specie by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"specie_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species/{{specie_id}}",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"{{specie_id}}"
									]
								},
								"description": "Get a specie by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"specie_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{species_url}}/reset",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset species to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a specie\n\n**Then execute** Get this specie\n\n**Return** this specie"
				},
				{
					"name": "Create and list all species",
					"item": [
						{
							"name": "Create a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"specie_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Goose\",\n\"description\": \"The goose is a waterfowl bird known for its honking sound.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Wetlands\",\n\"conservation_status\": \"Least Concern\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species"
									]
								},
								"description": "Create a specie"
							},
							"response": []
						},
						{
							"name": "List all species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"const id = pm.collectionVariables.get(\"specie_id\");",
											"const newSpecie = responseJson.find(specie => specie.id === id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of entries is 7\", () => {",
											"  pm.expect(responseJson).to.have.lengthOf(7);",
											"});",
											"",
											"responseJson.forEach((entry, index) => {",
											"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
											"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"  });",
											"});",
											"",
											"pm.test(\"Verify that the id of the new specie is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"specie_id\");",
											"  pm.expect(newSpecie.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that the name of the new specie is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(newSpecie.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that the description of the new specie is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(newSpecie.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that the diet of the new specie is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(newSpecie.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that the natural_habitat if the new specie is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(newSpecie.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that the conservation_status of the new specie is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(newSpecie.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{species_url}}/species",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species"
									]
								},
								"description": "List all species"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"specie_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{species_url}}/reset",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset species to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a specie\n\n**Then execute** List all species\n\n**Return** default species plus this specie"
				},
				{
					"name": "Create and delete a specie",
					"item": [
						{
							"name": "Create a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"specie_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Goose\",\n\"description\": \"The goose is a waterfowl bird known for its honking sound.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Wetlands\",\n\"conservation_status\": \"Least Concern\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species"
									]
								},
								"description": "Create a specie"
							},
							"response": []
						},
						{
							"name": "Delete a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"specie_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{species_url}}/species/{{specie_id}}",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"{{specie_id}}"
									]
								},
								"description": "Delete a specie"
							},
							"response": []
						},
						{
							"name": "Get a specie by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Specie not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"specie_id\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species/{{specie_id}}",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"{{specie_id}}"
									]
								},
								"description": "Get a specie by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"specie_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{species_url}}/reset",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset species to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a specie\n\n**Then execute** Delete this specie\n\n**Then execute** Get this specie\n\n**Return** an error 404"
				},
				{
					"name": "Two consecutive deletes",
					"item": [
						{
							"name": "Create a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"specie_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Goose\",\n\"description\": \"The goose is a waterfowl bird known for its honking sound.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Wetlands\",\n\"conservation_status\": \"Least Concern\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species"
									]
								},
								"description": "Create a specie"
							},
							"response": []
						},
						{
							"name": "Delete a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"specie_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{species_url}}/species/{{specie_id}}",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"{{specie_id}}"
									]
								},
								"description": "Delete a specie"
							},
							"response": []
						},
						{
							"name": "Delete a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Specie not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{species_url}}/species/{{specie_id}}",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"{{specie_id}}"
									]
								},
								"description": "Delete a specie"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"specie_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{species_url}}/reset",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset species to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a specie\n\n**Then execute** Delete this specie\n\n**Then execute** Delete this specie\n\n**Return** an error 404"
				},
				{
					"name": "Create and update a specie",
					"item": [
						{
							"name": "Create a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"specie_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Goose\",\n\"description\": \"The goose is a waterfowl bird known for its honking sound.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Wetlands\",\n\"conservation_status\": \"Least Concern\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species"
									]
								},
								"description": "Create a specie"
							},
							"response": []
						},
						{
							"name": "Update a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"specie_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goat\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goat is a domesticated herbivorous mammal.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Grasslands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Goat\",\n\"description\": \"The goat is a domesticated herbivorous mammal.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Grasslands\",\n\"conservation_status\": \"Least Concern\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species/{{specie_id}}",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"{{specie_id}}"
									]
								},
								"description": "Update a specie"
							},
							"response": []
						},
						{
							"name": "Get a specie by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"specie_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goat\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goat is a domesticated herbivorous mammal.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Grasslands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species/{{specie_id}}",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"{{specie_id}}"
									]
								},
								"description": "Get a specie by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"specie_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{species_url}}/reset",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset species to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a specie\n\n**Then execute** Update this specie\n\n**Then execute** Get this specie\n\n**Return** the specie updated"
				},
				{
					"name": "Create and patch a specie",
					"item": [
						{
							"name": "Create a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"specie_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Goose\",\n\"description\": \"The goose is a waterfowl bird known for its honking sound.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Wetlands\",\n\"conservation_status\": \"Least Concern\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species"
									]
								},
								"description": "Create a specie"
							},
							"response": []
						},
						{
							"name": "Update specific fields of a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"specie_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound. HONK! HONK!!!\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"description\": \"The goose is a waterfowl bird known for its honking sound. HONK! HONK!!!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species/specie7",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"specie7"
									]
								},
								"description": "Update specific fields of a specie"
							},
							"response": []
						},
						{
							"name": "Get a specie by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"specie_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Goose\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that description is correct\", function () {",
											"    const description = \"The goose is a waterfowl bird known for its honking sound. HONK! HONK!!!\";",
											"    pm.expect(responseJson.description).to.eql(description);",
											"});",
											"",
											"pm.test(\"Verify that diet is correct\", function () {",
											"    const diet = \"Herbivore\";",
											"    pm.expect(responseJson.diet).to.eql(diet);",
											"});",
											"",
											"pm.test(\"Verify that natural_habitat is correct\", function () {",
											"    const natural_habitat = \"Wetlands\";",
											"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
											"});",
											"",
											"pm.test(\"Verify that conservation_status is correct\", function () {",
											"    const conservation_status = \"Least Concern\";",
											"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species/{{specie_id}}",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"{{specie_id}}"
									]
								},
								"description": "Get a specie by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"specie_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{species_url}}/reset",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset species to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a specie\n\n**Then execute** Patch this specie\n\n**Then execute** Get this specie\n\n**Return** the animal patched"
				},
				{
					"name": "Update a non-existing specie",
					"item": [
						{
							"name": "Update a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Specie not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"Goat\",\n\"description\": \"The goat is a domesticated herbivorous mammal.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Grasslands\",\n\"conservation_status\": \"Least Concern\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species/specie0",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"specie0"
									]
								},
								"description": "Update a specie"
							},
							"response": []
						}
					],
					"description": "**Execute** Update a specie\n\n**Return** an error 404"
				},
				{
					"name": "Patch a non-existing specie",
					"item": [
						{
							"name": "Update specific fields of a specie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Specie not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"description\": \"The goat is a domesticated herbivorous mammal with horns.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{species_url}}/species/specie0",
									"host": [
										"{{species_url}}"
									],
									"path": [
										"species",
										"specie0"
									]
								},
								"description": "Update specific fields of a specie"
							},
							"response": []
						}
					],
					"description": "**Execute** Patch a specie\n\n**Return** an error 404"
				}
			],
			"description": "Integration tests of the service \"Species\"."
		},
		{
			"name": "Pictures",
			"item": [
				{
					"name": "List all",
					"item": [
						{
							"name": "List all pictures",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of entries is 28\", () => {",
											"  pm.expect(responseJson).to.have.lengthOf(28);",
											"});",
											"",
											"responseJson.forEach((entry, index) => {",
											"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
											"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures"
									]
								},
								"description": "List all pictures"
							},
							"response": []
						}
					],
					"description": "**Execute** list all pictures\n\n**Return** all pictures"
				},
				{
					"name": "Get existing picture",
					"item": [
						{
							"name": "Get a picture by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"picture1\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Marguerite\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Animal\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/animals/picture1.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures/picture1",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"picture1"
									]
								},
								"description": "Get a picture by id"
							},
							"response": []
						}
					],
					"description": "**Execute** get an existing picture by its id\n\n**Return** the requested picture"
				},
				{
					"name": "Get non-existing picture",
					"item": [
						{
							"name": "Get a picture by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Picture not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures/picture0",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"picture0"
									]
								},
								"description": "Get a picture by id"
							},
							"response": []
						}
					],
					"description": "**Execute** get a non-existing picture by its id\n\n**Return** an error 404"
				},
				{
					"name": "Create and get a picture",
					"item": [
						{
							"name": "Create a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures"
									]
								},
								"description": "Create a picture"
							},
							"response": []
						},
						{
							"name": "Get a picture by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"picture_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures/{{picture_id}}",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"{{picture_id}}"
									]
								},
								"description": "Get a picture by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"picture_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/reset",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset pictures to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a picture\n\n**Then execute** Get this picture\n\n**Return** this picture"
				},
				{
					"name": "Create and list all pictures",
					"item": [
						{
							"name": "Create a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures"
									]
								},
								"description": "Create a picture"
							},
							"response": []
						},
						{
							"name": "List all pictures",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"const id = pm.collectionVariables.get(\"picture_id\");",
											"const newPicture = responseJson.find(picture => picture.id === id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of entries is 29\", () => {",
											"  pm.expect(responseJson).to.have.lengthOf(29);",
											"});",
											"",
											"responseJson.forEach((entry, index) => {",
											"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
											"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"  });",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    pm.expect(newPicture.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(newPicture.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(newPicture.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(newPicture.url).to.eql(url);",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures"
									]
								},
								"description": "List all pictures"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"picture_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/reset",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset pictures to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a picture\n\n**Then execute** List all pictures\n\n**Return** default pictures plus this picture"
				},
				{
					"name": "Create and delete a picture",
					"item": [
						{
							"name": "Create a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures"
									]
								},
								"description": "Create a picture"
							},
							"response": []
						},
						{
							"name": "Delete a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"picture_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures/{{picture_id}}",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"{{picture_id}}"
									]
								},
								"description": "Delete a picture"
							},
							"response": []
						},
						{
							"name": "Get a picture by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Picture not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures/{{picture_id}}",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"{{picture_id}}"
									]
								},
								"description": "Get a picture by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"picture_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/reset",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset pictures to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a picture\n\n**Then execute** Delete this picture\n\n**Then execute** Get this picture\n\n**Return** an error 404"
				},
				{
					"name": "Two consecutive deletes",
					"item": [
						{
							"name": "Create a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures"
									]
								},
								"description": "Create a picture"
							},
							"response": []
						},
						{
							"name": "Delete an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"\tconst id = pm.collectionVariables.get(\"picture_id\");",
											"  pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures/{{picture_id}}",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"{{picture_id}}"
									]
								},
								"description": "Delete a picture"
							},
							"response": []
						},
						{
							"name": "Delete an animal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Picture not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures/picture29",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"picture29"
									]
								},
								"description": "Delete a picture"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"picture_id\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/reset",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset pictures to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a picture\n\n**Then execute** Delete this picture\n\n**Then execute** Delete this picture\n\n**Return** an error 404"
				},
				{
					"name": "Create and update a picture",
					"item": [
						{
							"name": "Create a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Jacky\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures"
									]
								},
								"description": "Create a picture"
							},
							"response": []
						},
						{
							"name": "Update a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Emile\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"picture of Emile\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures/{{picture_id}}",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"{{picture_id}}"
									]
								},
								"description": "Update a picture"
							},
							"response": []
						},
						{
							"name": "Get a picture by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"picture29\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Emile\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures/{{picture_id}}",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"{{picture_id}}"
									]
								},
								"description": "Get a picture by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"picture_id\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/reset",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset pictures to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a picture\n\n**Then execute** Update this picture\n\n**Then execute** Get this picture\n\n**Return** the picture updated"
				},
				{
					"name": "Create and patch a picture",
					"item": [
						{
							"name": "Create a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"picture of Emile\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"picture of Emile\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures"
									]
								},
								"description": "Create a picture"
							},
							"response": []
						},
						{
							"name": "Patch a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id exists\", function () {",
											"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Emile, \\\"the killer\\\"\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Emile, \\\"the killer\\\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures/{{picture_id}}",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"{{picture_id}}"
									]
								},
								"description": "Update specific fields of a picture"
							},
							"response": []
						},
						{
							"name": "Get a picture by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"picture29\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that name is correct\", function () {",
											"    const name = \"Emile, \\\"the killer\\\"\";",
											"    pm.expect(responseJson.name).to.eql(name);",
											"});",
											"",
											"pm.test(\"Verify that type is correct\", function () {",
											"    const type = \"Farmer\";",
											"    pm.expect(responseJson.type).to.eql(type);",
											"});",
											"",
											"pm.test(\"Verify that url is correct\", function () {",
											"    const url = \"/pictures/farmers/picture29.png\";",
											"    pm.expect(responseJson.url).to.eql(url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/pictures/{{picture_id}}",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"{{picture_id}}"
									]
								},
								"description": "Get a picture by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"picture_id\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{pictures_url}}/reset",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset pictures to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a picture\n\n**Then execute** Patch this picture\n\n**Then execute** Get this picture\n\n**Return** the picture patched"
				},
				{
					"name": "Update a non-existing picture",
					"item": [
						{
							"name": "Update a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Picture not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures/picture0",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"picture0"
									]
								},
								"description": "Update a picture"
							},
							"response": []
						}
					],
					"description": "**Execute** Update a picture\n\n**Return** an error 404"
				},
				{
					"name": "Patch a non-existing picture",
					"item": [
						{
							"name": "Patch a picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Picture not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Emile, \\\"the killer\\\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pictures_url}}/pictures/picture0",
									"host": [
										"{{pictures_url}}"
									],
									"path": [
										"pictures",
										"picture0"
									]
								},
								"description": "Update specific fields of a picture"
							},
							"response": []
						}
					],
					"description": "**Execute** Patch a picture\n\n**Return** an error 404"
				}
			],
			"description": "Integration tests of the service \"Pictures\"."
		},
		{
			"name": "Farmers",
			"item": [
				{
					"name": "List all",
					"item": [
						{
							"name": "List all farmers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of entries is 4\", () => {",
											"  pm.expect(responseJson).to.have.lengthOf(4);",
											"});",
											"",
											"responseJson.forEach((entry, index) => {",
											"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
											"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"specialties\").and.to.be.an(\"array\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"picture\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers"
									]
								},
								"description": "List all farmers"
							},
							"response": []
						}
					],
					"description": "**Execute** list all farmers\n\n**Return** all farmers"
				},
				{
					"name": "Get existing farmer",
					"item": [
						{
							"name": "Get a farmer by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer1\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"Alice\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Cooper\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1948-02-04\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture25\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers/farmer1",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"farmer1"
									]
								},
								"description": "Get a farmer by id"
							},
							"response": []
						}
					],
					"description": "**Execute** get an existing farmer by its id\n\n**Return** the requested farmer"
				},
				{
					"name": "Get non-existing farmer",
					"item": [
						{
							"name": "Get a farmer by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Farmer not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers/farmer0",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"farmer0"
									]
								},
								"description": "Get a farmer by id"
							},
							"response": []
						}
					],
					"description": "**Execute** get a non-existing farmer by its id\n\n**Return** an error 404"
				},
				{
					"name": "Create and get a farmer",
					"item": [
						{
							"name": "Create a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture30\",\n\t\"status\": \"present\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers"
									]
								},
								"description": "Create a farmer"
							},
							"response": []
						},
						{
							"name": "Get a farmer by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers/{{farmer_id}}",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"{{farmer_id}}"
									]
								},
								"description": "Get a farmer by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"picture_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/reset",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset farmers to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a farmer\n\n**Then execute** Get this farmer\n\n**Return** this farmer"
				},
				{
					"name": "Create and list all farmers",
					"item": [
						{
							"name": "Create a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture30\",\n\t\"status\": \"present\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers"
									]
								},
								"description": "Create a farmer"
							},
							"response": []
						},
						{
							"name": "List all farmers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"const id = pm.collectionVariables.get(\"farmer_id\");",
											"const newFarmer = responseJson.find(farmer => farmer.id === id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of entries is 5\", () => {",
											"  pm.expect(responseJson).to.have.lengthOf(5);",
											"});",
											"",
											"responseJson.forEach((entry, index) => {",
											"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
											"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"specialties\").and.to.be.an(\"array\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"picture\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
											"  });",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(newFarmer.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(newFarmer.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(newFarmer.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(newFarmer.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(newFarmer.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(newFarmer.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(newFarmer.status).to.eql(status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers"
									]
								},
								"description": "List all farmers"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"farmer_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/reset",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset farmers to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a farmer\n\n**Then execute** List all farmers\n\n**Return** default farmers plus this farmer"
				},
				{
					"name": "Create and delete a farmer",
					"item": [
						{
							"name": "Create a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture30\",\n\t\"status\": \"present\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers"
									]
								},
								"description": "Create a farmer"
							},
							"response": []
						},
						{
							"name": "Delete a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers/{{farmer_id}}",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"{{farmer_id}}"
									]
								},
								"description": "Delete a farmer"
							},
							"response": []
						},
						{
							"name": "Get a farmer by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Farmer not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers/farmer5",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"farmer5"
									]
								},
								"description": "Get a farmer by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"farmer_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/reset",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset animals to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a farmer\n\n**Then execute** Delete this farmer\n\n**Then execute** Get this farmer\n\n**Return** an error 404"
				},
				{
					"name": "Two consecutive deletes",
					"item": [
						{
							"name": "Create a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture30\",\n\t\"status\": \"present\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers"
									]
								},
								"description": "Create a farmer"
							},
							"response": []
						},
						{
							"name": "Delete a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers/{{farmer_id}}",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"{{farmer_id}}"
									]
								},
								"description": "Delete a farmer"
							},
							"response": []
						},
						{
							"name": "Delete a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Farmer not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers/{{farmer_id}}",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"{{farmer_id}}"
									]
								},
								"description": "Delete a farmer"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"farmer_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/reset",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset farmers to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a farmer\n\n**Then execute** Delete this farmer\n\n**Then execute** Delete this farmer\n\n**Return** an error 404"
				},
				{
					"name": "Create and update a farmer",
					"item": [
						{
							"name": "Create a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"José\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Bové\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1953-06-11\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture30\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture30\",\n\t\"status\": \"present\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers"
									]
								},
								"description": "Create a farmer"
							},
							"response": []
						},
						{
							"name": "Update a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"Stéphane\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Le Foll\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1960-02-03\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture31\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"first_name\": \"Stéphane\",\n        \"last_name\": \"Le Foll\",\n        \"birth_date\": \"1960-02-03\",\n        \"specialties\": [\n            \"Cow\",\n            \"Sheep\",\n            \"Pig\"\n        ],\n        \"picture\": \"picture31\",\n        \"status\": \"present\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers/{{farmer_id}}",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"{{farmer_id}}"
									]
								},
								"description": "Update a farmer"
							},
							"response": []
						},
						{
							"name": "Get a farmer by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"Stéphane\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Le Foll\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1960-02-03\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture31\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers/{{farmer_id}}",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"{{farmer_id}}"
									]
								},
								"description": "Get a farmer by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"farmer_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/reset",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset farmers to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a farmer\n\n**Then execute** Update this farmer\n\n**Then execute** Get this farmer\n\n**Return** the farmer updated"
				},
				{
					"name": "Create and patch a farmer",
					"item": [
						{
							"name": "Create a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"Stéphane\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Le Foll\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1960-02-03\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture31\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"present\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"first_name\": \"Stéphane\",\n        \"last_name\": \"Le Foll\",\n        \"birth_date\": \"1960-02-03\",\n        \"specialties\": [\n            \"Cow\",\n            \"Sheep\",\n            \"Pig\"\n        ],\n        \"picture\": \"picture31\",\n        \"status\": \"present\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers"
									]
								},
								"description": "Create a farmer"
							},
							"response": []
						},
						{
							"name": "Update specific fields of a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"Stéphane\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Le Foll\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1960-02-03\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture31\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"status\": \"gone\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers/farmer5",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"farmer5"
									]
								},
								"description": "Update specific fields of a farmer"
							},
							"response": []
						},
						{
							"name": "Get a farmer by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that id is correct\", function () {",
											"    const id = \"farmer5\";",
											"    pm.expect(responseJson.id).to.eql(id);",
											"});",
											"",
											"pm.test(\"Verify that first_name is correct\", function () {",
											"    const first_name = \"Stéphane\";",
											"    pm.expect(responseJson.first_name).to.eql(first_name);",
											"});",
											"",
											"pm.test(\"Verify that last_name is correct\", function () {",
											"    const last_name = \"Le Foll\";",
											"    pm.expect(responseJson.last_name).to.eql(last_name);",
											"});",
											"",
											"pm.test(\"Verify that birth_date is correct\", function () {",
											"    const birth_date = \"1960-02-03\";",
											"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
											"});",
											"",
											"pm.test(\"Verify that specialties is correct\", function () {",
											"    const specialties = [",
											"            \"Cow\",",
											"            \"Sheep\",",
											"            \"Pig\"",
											"        ];",
											"    pm.expect(responseJson.specialties).to.eql(specialties);",
											"});",
											"",
											"pm.test(\"Verify that picture is correct\", function () {",
											"    const picture = \"picture31\";",
											"    pm.expect(responseJson.picture).to.eql(picture);",
											"});",
											"",
											"pm.test(\"Verify that status is correct\", function () {",
											"    const status = \"gone\";",
											"    pm.expect(responseJson.status).to.eql(status);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/farmers/{{farmer_id}}",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"{{farmer_id}}"
									]
								},
								"description": "Get a farmer by id"
							},
							"response": []
						},
						{
							"name": "Teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Verify teardown success",
											" pm.test(\"Check that status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify reset body is correct\", function () {",
											"  pm.expect(responseJson.applied).is.true;",
											"});",
											"",
											"// Reset variables",
											"pm.collectionVariables.unset(\"farmer_id\")",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{farmers_url}}/reset",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"reset"
									]
								},
								"description": "Reset farmers to the default values"
							},
							"response": []
						}
					],
					"description": "**Execute** Create a farmer\n\n**Then execute** Patch this farmer\n\n**Then execute** Get this farmer\n\n**Return** the farmer patched"
				},
				{
					"name": "Update a non-existing farmer",
					"item": [
						{
							"name": "Update a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Farmer not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"first_name\": \"Stéphane\",\n        \"last_name\": \"Le Foll\",\n        \"birth_date\": \"1960-02-03\",\n        \"specialties\": [\n            \"Cow\",\n            \"Sheep\",\n            \"Pig\"\n        ],\n        \"picture\": \"picture31\",\n        \"status\": \"present\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers/farmer0",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"farmer0"
									]
								},
								"description": "Update a farmer"
							},
							"response": []
						}
					],
					"description": "**Execute** Update a farmer\n\n**Return** an error 404"
				},
				{
					"name": "Patch a non-existing farmer",
					"item": [
						{
							"name": "Update specific fields of a farmer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init variables",
											"const responseJson = pm.response.json();",
											"",
											"// Tests",
											" pm.test(\"Check that status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Verify the content of the response\", function () {",
											"\t\tconst errorMessage = \"Farmer not found\";",
											"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"status\": \"gone\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{farmers_url}}/farmers/farmer0",
									"host": [
										"{{farmers_url}}"
									],
									"path": [
										"farmers",
										"farmer0"
									]
								},
								"description": "Update specific fields of a farmer"
							},
							"response": []
						}
					],
					"description": "**Execute** Patch a farmer\n\n**Return** an error 404"
				}
			],
			"description": "Integration tests of the service \"Farmers\"."
		},
		{
			"name": "Farm",
			"item": [
				{
					"name": "Farm",
					"item": [
						{
							"name": "Get Farm, include gone",
							"item": [
								{
									"name": "Get farm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const nb_animals = 24;",
													"const nb_farmers = 4;",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that farm_name is correct\", function () {",
													"    const farm_name = \"Farmville\";",
													"    pm.expect(responseJson.farm_name).to.eql(farm_name);",
													"});",
													"",
													"pm.test(\"Verify that beginning_date is correct\", function () {",
													"    const beginning_date = \"2009-06-19\";",
													"    pm.expect(responseJson.beginning_date).to.eql(beginning_date);",
													"});",
													"",
													"pm.test(\"Verify that nb_animals is correct\", function () {",
													"    pm.expect(responseJson.nb_animals).to.eql(nb_animals);",
													"});",
													"",
													"",
													"pm.test(\"Verify that nb_farmers is correct\", function () {",
													"    pm.expect(responseJson.nb_farmers).to.eql(nb_farmers);",
													"});",
													"",
													"pm.test(\"Number of entries in farmers is 4\", () => {",
													"  pm.expect(responseJson.farmers).to.have.lengthOf(nb_farmers);",
													"});",
													"",
													"responseJson.farmers.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.specialties).to.have.lengthOf(3);",
													"    entry.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"    pm.expect(entry.picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});",
													"",
													"responseJson.animals.forEach((animal, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(animal).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let specie = animal.specie;",
													"    pm.expect(specie).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let farmer = animal.farmer",
													"    pm.expect(farmer).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer.specialties).to.have.lengthOf(3);",
													"    farmer.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"",
													"    let picture = farmer.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    pm.expect(animal).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    picture = animal.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"",
													"})",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm?include_gone=true",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm"
											],
											"query": [
												{
													"key": "include_gone",
													"value": "true"
												}
											]
										},
										"description": "Get farm"
									},
									"response": []
								}
							],
							"description": "**Execute** get the farm, with param include_gone=true\n\n**Return** the farm, including gone farmers and animals"
						},
						{
							"name": "Get farm, not include gone",
							"item": [
								{
									"name": "Get farm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const nb_animals = 20;",
													"const nb_farmers = 2;",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that farm_name is correct\", function () {",
													"    const farm_name = \"Farmville\";",
													"    pm.expect(responseJson.farm_name).to.eql(farm_name);",
													"});",
													"",
													"pm.test(\"Verify that beginning_date is correct\", function () {",
													"    const beginning_date = \"2009-06-19\";",
													"    pm.expect(responseJson.beginning_date).to.eql(beginning_date);",
													"});",
													"",
													"pm.test(\"Verify that nb_animals is correct\", function () {",
													"    pm.expect(responseJson.nb_animals).to.eql(nb_animals);",
													"});",
													"",
													"",
													"pm.test(\"Verify that nb_farmers is correct\", function () {",
													"    pm.expect(responseJson.nb_farmers).to.eql(nb_farmers);",
													"});",
													"",
													"pm.test(\"Number of entries in farmers is 4\", () => {",
													"  pm.expect(responseJson.farmers).to.have.lengthOf(nb_farmers);",
													"});",
													"",
													"responseJson.farmers.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.specialties).to.have.lengthOf(3);",
													"    entry.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"    pm.expect(entry.picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});",
													"",
													"responseJson.animals.forEach((animal, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(animal).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let specie = animal.specie;",
													"    pm.expect(specie).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let farmer = animal.farmer",
													"    pm.expect(farmer).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer.specialties).to.have.lengthOf(3);",
													"    farmer.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"",
													"    let picture = farmer.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    pm.expect(animal).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    picture = animal.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"",
													"})",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm?include_gone=false",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm"
											],
											"query": [
												{
													"key": "include_gone",
													"value": "false"
												}
											]
										},
										"description": "Get farm"
									},
									"response": []
								}
							],
							"description": "**Execute** get the farm, with param include_gone=false\n\n**Return** the farm, without gone farmers and animals"
						},
						{
							"name": "Update Farm",
							"item": [
								{
									"name": "Update farm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const nb_animals = 24;",
													"const nb_farmers = 4;",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that farm_name is correct\", function () {",
													"    const farm_name = \"Stardew Valley\";",
													"    pm.expect(responseJson.farm_name).to.eql(farm_name);",
													"});",
													"",
													"pm.test(\"Verify that beginning_date is correct\", function () {",
													"    const beginning_date = \"2016-02-26\";",
													"    pm.expect(responseJson.beginning_date).to.eql(beginning_date);",
													"});",
													"",
													"pm.test(\"Verify that nb_animals is correct\", function () {",
													"    pm.expect(responseJson.nb_animals).to.eql(nb_animals);",
													"});",
													"",
													"",
													"pm.test(\"Verify that nb_farmers is correct\", function () {",
													"    pm.expect(responseJson.nb_farmers).to.eql(nb_farmers);",
													"});",
													"",
													"pm.test(\"Number of entries in farmers is 4\", () => {",
													"  pm.expect(responseJson.farmers).to.have.lengthOf(nb_farmers);",
													"});",
													"",
													"responseJson.farmers.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.specialties).to.have.lengthOf(3);",
													"    entry.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"    pm.expect(entry.picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});",
													"",
													"responseJson.animals.forEach((animal, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(animal).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let specie = animal.specie;",
													"    pm.expect(specie).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let farmer = animal.farmer",
													"    pm.expect(farmer).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer.specialties).to.have.lengthOf(3);",
													"    farmer.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"",
													"    let picture = farmer.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    pm.expect(animal).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    picture = animal.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"",
													"})",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"farm_name\": \"Stardew Valley\",\n    \"beginning_date\": \"2016-02-26\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farm",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm"
											]
										},
										"description": "Update farm"
									},
									"response": []
								},
								{
									"name": "Get farm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const nb_animals = 20;",
													"const nb_farmers = 2;",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that farm_name is correct\", function () {",
													"    const farm_name = \"Stardew Valley\";",
													"    pm.expect(responseJson.farm_name).to.eql(farm_name);",
													"});",
													"",
													"pm.test(\"Verify that beginning_date is correct\", function () {",
													"    const beginning_date = \"2016-02-26\";",
													"    pm.expect(responseJson.beginning_date).to.eql(beginning_date);",
													"});",
													"",
													"pm.test(\"Verify that nb_animals is correct\", function () {",
													"    pm.expect(responseJson.nb_animals).to.eql(nb_animals);",
													"});",
													"",
													"",
													"pm.test(\"Verify that nb_farmers is correct\", function () {",
													"    pm.expect(responseJson.nb_farmers).to.eql(nb_farmers);",
													"});",
													"",
													"pm.test(\"Number of entries in farmers is 4\", () => {",
													"  pm.expect(responseJson.farmers).to.have.lengthOf(nb_farmers);",
													"});",
													"",
													"responseJson.farmers.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.specialties).to.have.lengthOf(3);",
													"    entry.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"    pm.expect(entry.picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});",
													"",
													"responseJson.animals.forEach((animal, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(animal).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let specie = animal.specie;",
													"    pm.expect(specie).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let farmer = animal.farmer",
													"    pm.expect(farmer).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer.specialties).to.have.lengthOf(3);",
													"    farmer.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"",
													"    let picture = farmer.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    pm.expect(animal).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    picture = animal.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"",
													"})",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm"
											]
										},
										"description": "Get farm"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farm"
									},
									"response": []
								}
							],
							"description": "**Execute** update farm\n\n**Then execute** get farm\n\n**Return** the farm updated"
						},
						{
							"name": "Patch Farm",
							"item": [
								{
									"name": "Patch farm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const nb_animals = 24;",
													"const nb_farmers = 4;",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that farm_name is correct\", function () {",
													"    const farm_name = \"Farming Simulator\";",
													"    pm.expect(responseJson.farm_name).to.eql(farm_name);",
													"});",
													"",
													"pm.test(\"Verify that beginning_date is correct\", function () {",
													"    const beginning_date = \"2009-06-19\";",
													"    pm.expect(responseJson.beginning_date).to.eql(beginning_date);",
													"});",
													"",
													"pm.test(\"Verify that nb_animals is correct\", function () {",
													"    pm.expect(responseJson.nb_animals).to.eql(nb_animals);",
													"});",
													"",
													"",
													"pm.test(\"Verify that nb_farmers is correct\", function () {",
													"    pm.expect(responseJson.nb_farmers).to.eql(nb_farmers);",
													"});",
													"",
													"pm.test(\"Number of entries in farmers is 4\", () => {",
													"  pm.expect(responseJson.farmers).to.have.lengthOf(nb_farmers);",
													"});",
													"",
													"responseJson.farmers.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.specialties).to.have.lengthOf(3);",
													"    entry.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"    pm.expect(entry.picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});",
													"",
													"responseJson.animals.forEach((animal, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(animal).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let specie = animal.specie;",
													"    pm.expect(specie).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let farmer = animal.farmer",
													"    pm.expect(farmer).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer.specialties).to.have.lengthOf(3);",
													"    farmer.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"",
													"    let picture = farmer.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    pm.expect(animal).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    picture = animal.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"",
													"})",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"farm_name\": \"Farming Simulator\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farm",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm"
											]
										},
										"description": "Patch farm"
									},
									"response": []
								},
								{
									"name": "Get farm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const nb_animals = 20;",
													"const nb_farmers = 2;",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that farm_name is correct\", function () {",
													"    const farm_name = \"Farming Simulator\";",
													"    pm.expect(responseJson.farm_name).to.eql(farm_name);",
													"});",
													"",
													"pm.test(\"Verify that beginning_date is correct\", function () {",
													"    const beginning_date = \"2009-06-19\";",
													"    pm.expect(responseJson.beginning_date).to.eql(beginning_date);",
													"});",
													"",
													"pm.test(\"Verify that nb_animals is correct\", function () {",
													"    pm.expect(responseJson.nb_animals).to.eql(nb_animals);",
													"});",
													"",
													"",
													"pm.test(\"Verify that nb_farmers is correct\", function () {",
													"    pm.expect(responseJson.nb_farmers).to.eql(nb_farmers);",
													"});",
													"",
													"pm.test(\"Number of entries in farmers is 4\", () => {",
													"  pm.expect(responseJson.farmers).to.have.lengthOf(nb_farmers);",
													"});",
													"",
													"responseJson.farmers.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.specialties).to.have.lengthOf(3);",
													"    entry.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"    pm.expect(entry.picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry.picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});",
													"",
													"responseJson.animals.forEach((animal, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(animal).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(animal).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let specie = animal.specie;",
													"    pm.expect(specie).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let farmer = animal.farmer",
													"    pm.expect(farmer).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer.specialties).to.have.lengthOf(3);",
													"    farmer.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"",
													"    let picture = farmer.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    pm.expect(animal).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    picture = animal.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"",
													"})",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm"
											]
										},
										"description": "Get farm"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farm"
									},
									"response": []
								}
							],
							"description": "**Execute** patch farm\n\n**Then execute** get farm\n\n**Return** the farm patched"
						}
					],
					"description": "Integration tests for the api \"farm\""
				},
				{
					"name": "Specie",
					"item": [
						{
							"name": "List all species",
							"item": [
								{
									"name": "List all species",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of entries is 6\", () => {",
													"  pm.expect(responseJson).to.have.lengthOf(6);",
													"});",
													"",
													"responseJson.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"})",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/species",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species"
											]
										},
										"description": "List all species in the database"
									},
									"response": []
								}
							],
							"description": "**Execute** list all species\n\n**Return** all species"
						},
						{
							"name": "Get a specie by id",
							"item": [
								{
									"name": "Get specie by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"specie1\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Cow\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The cow is a domesticated herbivorous mammal.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/species/specie1",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"specie1"
											]
										},
										"description": "Get specie by id"
									},
									"response": []
								}
							],
							"description": "**Execute** get an existing specie by its id\n\n**Return** the requested specie"
						},
						{
							"name": "Create a specie",
							"item": [
								{
									"name": "Create a specie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const id = \"specie7\";",
													"pm.environment.set(\"specie_id\", id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goose\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Wetlands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"Goose\",\n\"description\": \"The goose is a waterfowl bird known for its honking sound.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Wetlands\",\n\"conservation_status\": \"Least Concern\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/species",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species"
											]
										},
										"description": "Create a specie"
									},
									"response": []
								},
								{
									"name": "Get specie by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"specie7\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goose\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Wetlands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/species/{{specie_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"{{specie_id}}"
											]
										},
										"description": "Get specie by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"pm.environment.unset(\"specie_id\");",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farm"
									},
									"response": []
								}
							],
							"description": "**Execute** create a specie\n\n**Then execute** get an existing specie by its id\n\n**Return** the specie created"
						},
						{
							"name": "Update a specie",
							"item": [
								{
									"name": "Create a specie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const id = \"specie7\";",
													"pm.environment.set(\"specie_id\", id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goose\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goose is a waterfowl bird known for its honking sound.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Wetlands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"Goose\",\n\"description\": \"The goose is a waterfowl bird known for its honking sound.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Wetlands\",\n\"conservation_status\": \"Least Concern\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/species",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species"
											]
										},
										"description": "Create a specie"
									},
									"response": []
								},
								{
									"name": "Update a specie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"  const id = pm.environment.get(\"specie_id\");",
													"  pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goat\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goat is a domesticated herbivorous mammal.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"Goat\",\n\"description\": \"The goat is a domesticated herbivorous mammal.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Grasslands\",\n\"conservation_status\": \"Least Concern\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/species/{{specie_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"{{specie_id}}"
											]
										},
										"description": "Update a specie"
									},
									"response": []
								},
								{
									"name": "Get specie by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"specie7\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goat\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goat is a domesticated herbivorous mammal.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/species/specie7",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"specie7"
											]
										},
										"description": "Get specie by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"pm.environment.unset(\"specie_id\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farm"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a specie\n\n**Then execute** Update this specie\n\n**Then execute** Get this specie\n\n**Return** the specie updated"
						},
						{
							"name": "Patch a specie",
							"item": [
								{
									"name": "Create a specie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const id = \"specie7\";",
													"pm.environment.set(\"specie_id\", id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"  const id = pm.environment.get(\"specie_id\");",
													"  pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goat\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goat is a domesticated herbivorous mammal.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"Goat\",\n\"description\": \"The goat is a domesticated herbivorous mammal.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Grasslands\",\n\"conservation_status\": \"Least Concern\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/species",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species"
											]
										},
										"description": "Create a specie"
									},
									"response": []
								},
								{
									"name": "Update a specie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"  const id = pm.environment.get(\"specie_id\");",
													"  pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goat\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goat is a domesticated herbivorous mammal with horns.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"The goat is a domesticated herbivorous mammal with horns.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/species/{{specie_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"{{specie_id}}"
											]
										},
										"description": "Patch a specie"
									},
									"response": []
								},
								{
									"name": "Get specie by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"specie7\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goat\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goat is a domesticated herbivorous mammal with horns.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/species/specie7",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"specie7"
											]
										},
										"description": "Get specie by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"pm.environment.unset(\"specie_id\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farm"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a specie\n\n**Then execute** Patch this specie\n\n**Then execute** Get this specie\n\n**Return** the specie patched"
						},
						{
							"name": "Delete a specie",
							"item": [
								{
									"name": "Create a specie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const id = \"specie7\";",
													"pm.environment.set(\"specie_id\", id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"  const id = pm.environment.get(\"specie_id\");",
													"  pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goat\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goat is a domesticated herbivorous mammal.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"Goat\",\n\"description\": \"The goat is a domesticated herbivorous mammal.\",\n\"diet\": \"Herbivore\",\n\"natural_habitat\": \"Grasslands\",\n\"conservation_status\": \"Least Concern\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/species",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species"
											]
										},
										"description": "Create a specie"
									},
									"response": []
								},
								{
									"name": "Delete a specie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"const id = \"specie7\";",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"  const id = pm.environment.get(\"specie_id\");",
													"  pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Goat\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that description is correct\", function () {",
													"    const description = \"The goat is a domesticated herbivorous mammal.\";",
													"    pm.expect(responseJson.description).to.eql(description);",
													"});",
													"",
													"pm.test(\"Verify that diet is correct\", function () {",
													"    const diet = \"Herbivore\";",
													"    pm.expect(responseJson.diet).to.eql(diet);",
													"});",
													"",
													"pm.test(\"Verify that natural_habitat is correct\", function () {",
													"    const natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.natural_habitat).to.eql(natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that conservation_status is correct\", function () {",
													"    const conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.conservation_status).to.eql(conservation_status);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/species/{{specie_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"{{specie_id}}"
											]
										},
										"description": "Delete a specie"
									},
									"response": []
								},
								{
									"name": "Get specie by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Verify the content of the response\", function () {",
													"\t\tconst errorMessage = \"specie not found for id specie7\";",
													"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/species/specie7",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"specie7"
											]
										},
										"description": "Get specie by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"pm.environment.unset(\"specie_id\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farm"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a specie\n\n**Then execute** Delete this specie\n\n**Then execute** Get this specie\n\n**Return** an error 404"
						},
						{
							"name": "Delete a specie used by an animal",
							"item": [
								{
									"name": "Delete a specie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify the content of the response\", function () {",
													"\t\tconst errorMessage = \"The specie specie1 is used by at least 1 animal\";",
													"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/species/specie1",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"species",
												"specie1"
											]
										},
										"description": "Delete a specie"
									},
									"response": []
								}
							],
							"description": "**Execute** Delete this specie used by an animal\n\n**Return** an error 400"
						}
					],
					"description": "Integration tests for the api \"specie\""
				},
				{
					"name": "Picture",
					"item": [
						{
							"name": "List all pictures",
							"item": [
								{
									"name": "List all pictures",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of entries is 28\", () => {",
													"  pm.expect(responseJson).to.have.lengthOf(28);",
													"});",
													"",
													"responseJson.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/pictures",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures"
											]
										},
										"description": "List all pictures"
									},
									"response": []
								}
							],
							"description": "**Execute** list all pictures\n\n**Return** all pictures"
						},
						{
							"name": "Get a picture by id",
							"item": [
								{
									"name": "Get a picture by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													"pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    pm.expect(responseJson.id).to.eql(\"picture1\");",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Marguerite\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Animal\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/animals/picture1.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/pictures/picture1",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures",
												"picture1"
											]
										},
										"description": "Get a picture by id"
									},
									"response": []
								}
							],
							"description": "**Execute** get an existing picture by its id\n\n**Return** the requested picture"
						},
						{
							"name": "Create a picture",
							"item": [
								{
									"name": "Create a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Jacky\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/pictures",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures"
											]
										},
										"description": "Create a picture"
									},
									"response": []
								},
								{
									"name": "Get a picture by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"\tconst id = pm.collectionVariables.get(\"picture_id\");",
													"  pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Jacky\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/pictures/{{picture_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures",
												"{{picture_id}}"
											]
										},
										"description": "Get a picture by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"picture_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset pictures to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** create a picture\n\n**Then execute** get an existing picture by its id\n\n**Return** the picture created"
						},
						{
							"name": "Update a picture",
							"item": [
								{
									"name": "Create a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Jacky\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/pictures",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures"
											]
										},
										"description": "Create a picture"
									},
									"response": []
								},
								{
									"name": "Update a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Emile\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\":\"picture of Emile\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/pictures/{{picture_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures",
												"{{picture_id}}"
											]
										},
										"description": "Update a picture"
									},
									"response": []
								},
								{
									"name": "Get a picture by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"picture29\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Emile\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/pictures/{{picture_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures",
												"{{picture_id}}"
											]
										},
										"description": "Get a picture by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"picture_id\")"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset pictures to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a picture\n\n**Then execute** Update this picture\n\n**Then execute** Get this picture\n\n**Return** the picture updated"
						},
						{
							"name": "Patch a picture",
							"item": [
								{
									"name": "Create a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Emile\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\":\"picture of Emile\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/pictures",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures"
											]
										},
										"description": "Create a picture"
									},
									"response": []
								},
								{
									"name": "Patch a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Emile, \\\"the killer\\\"\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Emile, \\\"the killer\\\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/pictures/{{picture_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures",
												"{{picture_id}}"
											]
										},
										"description": "Update specific fields of a picture"
									},
									"response": []
								},
								{
									"name": "Get a picture by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"picture29\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Emile, \\\"the killer\\\"\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/pictures/{{picture_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures",
												"{{picture_id}}"
											]
										},
										"description": "Get a picture by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"picture_id\")"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset pictures to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a picture\n\n**Then execute** Patch this picture\n\n**Then execute** Get this picture\n\n**Return** the picture patched"
						},
						{
							"name": "Delete a picture",
							"item": [
								{
									"name": "Create a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"picture_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Jacky\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\":\"picture of Jacky\",\n  \"type\":\"Farmer\",\n  \"url\":\"/pictures/farmers/picture29.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/pictures",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures"
											]
										},
										"description": "Create a picture"
									},
									"response": []
								},
								{
									"name": "Delete a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"\tconst id = pm.collectionVariables.get(\"picture_id\");",
													"  pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"picture of Jacky\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that type is correct\", function () {",
													"    const type = \"Farmer\";",
													"    pm.expect(responseJson.type).to.eql(type);",
													"});",
													"",
													"pm.test(\"Verify that url is correct\", function () {",
													"    const url = \"/pictures/farmers/picture29.png\";",
													"    pm.expect(responseJson.url).to.eql(url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{pictures_url}}/pictures/{{picture_id}}",
											"host": [
												"{{pictures_url}}"
											],
											"path": [
												"pictures",
												"{{picture_id}}"
											]
										},
										"description": "Delete a picture"
									},
									"response": []
								},
								{
									"name": "Get a picture by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Verify the content of the response\", function () {",
													"\t\tconst errorMessage = \"Picture not found\";",
													"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pictures_url}}/pictures/{{picture_id}}",
											"host": [
												"{{pictures_url}}"
											],
											"path": [
												"pictures",
												"{{picture_id}}"
											]
										},
										"description": "Get a picture by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"picture_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset pictures to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a picture\n\n**Then execute** Delete this picture\n\n**Then execute** Get this picture\n\n**Return** an error 404"
						},
						{
							"name": "Delete a picture used by an animal",
							"item": [
								{
									"name": "Delete a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\tconst error_msg = \"The picture picture1 is used by at least 1 animal\";",
													"  pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/pictures/picture1",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures",
												"picture1"
											]
										},
										"description": "Delete a picture"
									},
									"response": []
								}
							],
							"description": "**Execute** Delete a picture used by an animal\n\n**Return** an error 400"
						},
						{
							"name": "Delete a picture used by a farmer",
							"item": [
								{
									"name": "Delete a picture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\tconst error_msg = \"The picture picture25 is used by at least 1 farmer\";",
													"  pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/pictures/picture25",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"pictures",
												"picture25"
											]
										},
										"description": "Delete a picture"
									},
									"response": []
								}
							],
							"description": "**Execute** Delete a picture used by a farmer\n\n**Return** an error 400"
						}
					],
					"description": "Integration tests for the api \"picture\""
				},
				{
					"name": "Animal",
					"item": [
						{
							"name": "List all animals",
							"item": [
								{
									"name": "List all animals",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of entries is 20\", () => {",
													"  pm.expect(responseJson).to.have.lengthOf(20);",
													"});",
													"",
													"responseJson.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    let specie = entry.specie;",
													"    pm.expect(specie).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"description\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"diet\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"natural_habitat\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(specie).to.have.property(\"conservation_status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let farmer = entry.farmer;",
													"    pm.expect(farmer).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer.specialties).to.have.lengthOf(3);",
													"    farmer.specialties.forEach(specialty => {",
													"        pm.expect(specialty).to.be.a(\"string\").and.to.not.be.empty;",
													"    })",
													"    let farmer_picture = farmer.picture;",
													"    pm.expect(farmer_picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer_picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer_picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer_picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(farmer).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"",
													"    let picture = entry.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "List all animals"
									},
									"response": []
								}
							],
							"description": "**Execute** list all animals\n\n**Return** all animals"
						},
						{
							"name": "Get an animal by id",
							"item": [
								{
									"name": "Get an animal by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"animal1\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Marguerite\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1959-12-16\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie1\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Cow\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The cow is a domesticated herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture1\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Marguerite\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture1.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/animals/animal1",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"animal1"
											]
										},
										"description": "Get an animal by id"
									},
									"response": []
								}
							],
							"description": "**Execute** get an existing animal by its id\n\n**Return** the requested animal"
						},
						{
							"name": "Create an animal",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Get an animal by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Get an animal by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** create an animal\n\n**Then execute** get an existing animal by its id\n\n**Return** the animal created"
						},
						{
							"name": "Create an animal with non existing specie",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"specie with id specie0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie0\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								}
							],
							"description": "**Execute** create an animal with a non-existing specie\n\n**Return** an error 400"
						},
						{
							"name": "Create an animal with non existing picture",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"picture with id picture0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture0\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								}
							],
							"description": "**Execute** create an animal with a non-existing picture\n\n**Return** an error 400"
						},
						{
							"name": "Create an animal with non existing farmer",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"farmer with id farmer0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer0\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								}
							],
							"description": "**Execute** create an animal with a non-existing farmer\n\n**Return** an error 400"
						},
						{
							"name": "Update an animal",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Update an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Rapidash\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1996-02-27\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer2\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Bob\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Sinclar\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1969-05-10\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture26\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Bob\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture26.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"present\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture14\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Jolly Jumper\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture14.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Rapidash\",\n    \"birth_date\": \"1996-02-27\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer2\",\n    \"status\": \"present\",\n    \"picture\": \"picture14\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Update an animal"
									},
									"response": []
								},
								{
									"name": "Get an animal by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Rapidash\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1996-02-27\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer2\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Bob\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Sinclar\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1969-05-10\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture26\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Bob\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture26.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"present\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture14\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Jolly Jumper\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture14.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Get an animal by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Update this animal\n\n**Then execute** Get this animal\n\n**Return** the animal updated"
						},
						{
							"name": "Update an animal with non existing specie",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Update an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"specie with id specie0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Rapidash\",\n    \"birth_date\": \"1996-02-27\",\n    \"specie\": \"specie0\",\n    \"farmer\": \"farmer2\",\n    \"status\": \"present\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Update an animal"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Update this animal with a non-existing specie\n\n**Return** an error 400"
						},
						{
							"name": "Update an animal with non existing picture",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Update an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"picture with id picture0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Rapidash\",\n    \"birth_date\": \"1996-02-27\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer2\",\n    \"status\": \"present\",\n    \"picture\": \"picture0\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Update an animal"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Update this animal with a non-existing picture\n\n**Return** an error 400"
						},
						{
							"name": "Update an animal with non existing farmer",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Update an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"farmer with id farmer0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Rapidash\",\n    \"birth_date\": \"1996-02-27\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer0\",\n    \"status\": \"present\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Update an animal"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Update this animal with a non-existing farmer\n\n**Return** an error 400"
						},
						{
							"name": "Patch an animal",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Patch an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": \"present\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Update specific fields of an animal"
									},
									"response": []
								},
								{
									"name": "Get an animal by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Get an animal by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Patch this animal\n\n**Then execute** Get this animal\n\n**Return** the animal patched"
						},
						{
							"name": "Patch an animal with non existing specie",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Patch an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"specie with id specie0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"specie\": \"specie0\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Update specific fields of an animal"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Patch this animal with a non-existing specie\n\n**Return** an error 400"
						},
						{
							"name": "Patch an animal with non existing picture",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Patch an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"picture with id picture0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"picture\": \"picture0\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Update specific fields of an animal"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Patch this animal with a non-existing picture\n\n**Return** an error 400"
						},
						{
							"name": "Patch an animal with non existing farmer",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Patch an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"farmer with id farmer0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"farmer\": \"farmer0\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Update specific fields of an animal"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Patch this animal with a non-existing farmer\n\n**Return** an error 400"
						},
						{
							"name": "Delete an animal",
							"item": [
								{
									"name": "Create an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Poulain\",\n    \"birth_date\": \"1848-02-01\",\n    \"specie\": \"specie4\",\n    \"farmer\": \"farmer1\",\n    \"status\": \"gone\",\n    \"picture\": \"picture13\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/animals",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals"
											]
										},
										"description": "Create an animal"
									},
									"response": []
								},
								{
									"name": "Delete an animal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"animal_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id exists\", function () {",
													"    pm.expect(responseJson).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Verify that name is correct\", function () {",
													"    const name = \"Poulain\";",
													"    pm.expect(responseJson.name).to.eql(name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1848-02-01\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specie.id is correct\", function () {",
													"    const specie_id = \"specie4\";",
													"    pm.expect(responseJson.specie.id).to.eql(specie_id);",
													"});",
													"",
													"pm.test(\"Verify that specie.name is correct\", function () {",
													"    const specie_name = \"Horse\";",
													"    pm.expect(responseJson.specie.name).to.eql(specie_name);",
													"});",
													"",
													"pm.test(\"Verify that specie.description is correct\", function () {",
													"    const specie_description = \"The horse is a large herbivorous mammal.\";",
													"    pm.expect(responseJson.specie.description).to.eql(specie_description);",
													"});",
													"",
													"pm.test(\"Verify that specie.diet is correct\", function () {",
													"    const specie_diet = \"Herbivore\";",
													"    pm.expect(responseJson.specie.diet).to.eql(specie_diet);",
													"});",
													"",
													"pm.test(\"Verify that specie.natural_habitat is correct\", function () {",
													"    const specie_natural_habitat = \"Grasslands\";",
													"    pm.expect(responseJson.specie.natural_habitat).to.eql(specie_natural_habitat);",
													"});",
													"",
													"pm.test(\"Verify that specie.conservation_status is correct\", function () {",
													"    const specie_conservation_status = \"Least Concern\";",
													"    pm.expect(responseJson.specie.conservation_status).to.eql(specie_conservation_status);",
													"});",
													"",
													"pm.test(\"Verify that farmer.id is correct\", function () {",
													"    const farmer_id = \"farmer1\";",
													"    pm.expect(responseJson.farmer.id).to.eql(farmer_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.first_name is correct\", function () {",
													"    const farmer_first_name = \"Alice\";",
													"    pm.expect(responseJson.farmer.first_name).to.eql(farmer_first_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.last_name is correct\", function () {",
													"    const farmer_last_name = \"Cooper\";",
													"    pm.expect(responseJson.farmer.last_name).to.eql(farmer_last_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.birth_date is correct\", function () {",
													"    const farmer_birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.farmer.birth_date).to.eql(farmer_birth_date);",
													"});",
													"",
													"pm.test(\"Verify that farmer.specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.farmer.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.id is correct\", function () {",
													"    const farmer_picture_id = \"picture25\";",
													"    pm.expect(responseJson.farmer.picture.id).to.eql(farmer_picture_id);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.name is correct\", function () {",
													"    const farmer_picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.farmer.picture.name).to.eql(farmer_picture_name);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.type is correct\", function () {",
													"    const farmer_picture_type = \"Farmer\";",
													"    pm.expect(responseJson.farmer.picture.type).to.eql(farmer_picture_type);",
													"});",
													"",
													"pm.test(\"Verify that farmer.picture.url is correct\", function () {",
													"    const farmer_picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.farmer.picture.url).to.eql(farmer_picture_url);",
													"});",
													"",
													"pm.test(\"Verify that farmer.status is correct\", function () {",
													"    const farmer_status = \"gone\";",
													"    pm.expect(responseJson.farmer.status).to.eql(farmer_status);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture13\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Tornado\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Animal\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/animals/picture13.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Delete an animal"
									},
									"response": []
								},
								{
									"name": "Get an animal by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													"pm.test(\"Check that status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Verify the content of the response\", function () {",
													"\t\tconst errorMessage = \"animal not found for id animal25\";",
													"\t\tpm.expect(responseJson.error).to.eql(errorMessage);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/animals/{{animal_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"animals",
												"{{animal_id}}"
											]
										},
										"description": "Get an animal by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"animal_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create an animal\n\n**Then execute** Delete this animal\n\n**Then execute** Get this animal\n\n**Return** an error 404"
						}
					],
					"description": "Integration tests for the api \"animal\""
				},
				{
					"name": "Farmers",
					"item": [
						{
							"name": "List all farmers",
							"item": [
								{
									"name": "List all farmers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Number of entries is 2\", () => {",
													"  pm.expect(responseJson).to.have.lengthOf(2);",
													"});",
													"",
													"responseJson.forEach((entry, index) => {",
													"  pm.test(`Entry ${index + 1} has all required fields and non-empty values`, () => {",
													"    pm.expect(entry).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"first_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"last_name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"birth_date\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"specialties\").and.to.be.an(\"array\").and.have.length(3);",
													"    let picture = entry.picture;",
													"    pm.expect(picture).to.have.property(\"id\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"name\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"type\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(picture).to.have.property(\"url\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(entry).to.have.property(\"status\").and.to.be.a(\"string\").and.to.not.be.empty;",
													"  });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farmers",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers"
											]
										},
										"description": "List all farmers"
									},
									"response": []
								}
							],
							"description": "**Execute** list all farmers\n\n**Return** all farmers"
						},
						{
							"name": "Get a farmer by id",
							"item": [
								{
									"name": "Get a farmer by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer1\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"Alice\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Cooper\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1948-02-04\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farmers/farmer1",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"farmer1"
											]
										},
										"description": "Get a farmer by id"
									},
									"response": []
								}
							],
							"description": "**Execute** get an existing farmer by its id\n\n**Return** the requested farmer"
						},
						{
							"name": "Create a farmer",
							"item": [
								{
									"name": "Create a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture25\",\n\t\"status\": \"present\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers"
											]
										},
										"description": "Create a farmer"
									},
									"response": []
								},
								{
									"name": "Get a farmer by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers/{{farmer_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"{{farmer_id}}"
											]
										},
										"description": "Get a farmer by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"picture_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farmers to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** create a farmer\n\n**Then execute** get an existing farmer by its id\n\n**Return** the farmer created"
						},
						{
							"name": "Create a farmer with non existing picture",
							"item": [
								{
									"name": "Create a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"picture with id picture0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture0\",\n\t\"status\": \"present\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers"
											]
										},
										"description": "Create a farmer"
									},
									"response": []
								}
							],
							"description": "**Execute** create a farmer with a non-existing picture\n\n**Return** an error 400"
						},
						{
							"name": "Update a farmer",
							"item": [
								{
									"name": "Create a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture25\",\n\t\"status\": \"present\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers"
											]
										},
										"description": "Create a farmer"
									},
									"response": []
								},
								{
									"name": "Update a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"Stéphane\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Le Foll\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1960-02-03\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture26\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Bob\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture26.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"first_name\": \"Stéphane\",\n        \"last_name\": \"Le Foll\",\n        \"birth_date\": \"1960-02-03\",\n        \"specialties\": [\n            \"Cow\",\n            \"Sheep\",\n            \"Pig\"\n        ],\n        \"picture\": \"picture26\",\n        \"status\": \"present\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers/{{farmer_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"{{farmer_id}}"
											]
										},
										"description": "Update a farmer"
									},
									"response": []
								},
								{
									"name": "Get a farmer by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"Stéphane\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Le Foll\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1960-02-03\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture26\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Bob\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture26.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farmers/{{farmer_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"{{farmer_id}}"
											]
										},
										"description": "Get a farmer by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"farmer_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farmers to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a farmer\n\n**Then execute** Update this farmer\n\n**Then execute** Get this farmer\n\n**Return** the farmer updated"
						},
						{
							"name": "Update a farmer with non existing picture",
							"item": [
								{
									"name": "Create a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture25\",\n\t\"status\": \"present\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers"
											]
										},
										"description": "Create a farmer"
									},
									"response": []
								},
								{
									"name": "Update a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"picture with id picture0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"first_name\": \"Stéphane\",\n        \"last_name\": \"Le Foll\",\n        \"birth_date\": \"1960-02-03\",\n        \"specialties\": [\n            \"Cow\",\n            \"Sheep\",\n            \"Pig\"\n        ],\n        \"picture\": \"picture0\",\n        \"status\": \"present\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers/{{farmer_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"{{farmer_id}}"
											]
										},
										"description": "Update a farmer"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"farmer_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farmers to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a farmer\n\n**Then execute** Update this farmer with a non-existing picture\n\n**Return** an error 400"
						},
						{
							"name": "Patch a farmer",
							"item": [
								{
									"name": "Create a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture25\",\n\t\"status\": \"present\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers"
											]
										},
										"description": "Create a farmer"
									},
									"response": []
								},
								{
									"name": "Update specific fields of a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"status\": \"gone\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers/farmer5",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"farmer5"
											]
										},
										"description": "Update specific fields of a farmer"
									},
									"response": []
								},
								{
									"name": "Get a farmer by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"gone\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farmers/{{farmer_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"{{farmer_id}}"
											]
										},
										"description": "Get a farmer by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"farmer_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farmers to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a farmer\n\n**Then execute** Patch this farmer\n\n**Then execute** Get this farmer\n\n**Return** the farmer patched"
						},
						{
							"name": "Patch a farmer with non existing picture",
							"item": [
								{
									"name": "Create a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture25\",\n\t\"status\": \"present\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers"
											]
										},
										"description": "Create a farmer"
									},
									"response": []
								},
								{
									"name": "Update specific fields of a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"picture with id picture0 does not exist\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"picture\": \"picture0\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers/farmer5",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"farmer5"
											]
										},
										"description": "Update specific fields of a farmer"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"farmer_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset farmers to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a farmer\n\n**Then execute** Patch this farmer with a non-existing picture\n\n**Return** an error 400"
						},
						{
							"name": "Delete a farmer",
							"item": [
								{
									"name": "Create a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"first_name\": \"José\",\n\t\"last_name\": \"Bové\",\n\t\"birth_date\": \"1953-06-11\",\n\t\"specialties\": [\n\t\t\"Cow\",\n\t\t\"Sheep\",\n\t\t\"Pig\"\n\t],\n\t\"picture\": \"picture25\",\n\t\"status\": \"present\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{farm_url}}/farmers",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers"
											]
										},
										"description": "Create a farmer"
									},
									"response": []
								},
								{
									"name": "Delete a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify that id is correct\", function () {",
													"    const id = \"farmer5\";",
													"    pm.expect(responseJson.id).to.eql(id);",
													"});",
													"",
													"pm.test(\"Verify that first_name is correct\", function () {",
													"    const first_name = \"José\";",
													"    pm.expect(responseJson.first_name).to.eql(first_name);",
													"});",
													"",
													"pm.test(\"Verify that last_name is correct\", function () {",
													"    const last_name = \"Bové\";",
													"    pm.expect(responseJson.last_name).to.eql(last_name);",
													"});",
													"",
													"pm.test(\"Verify that birth_date is correct\", function () {",
													"    const birth_date = \"1953-06-11\";",
													"    pm.expect(responseJson.birth_date).to.eql(birth_date);",
													"});",
													"",
													"pm.test(\"Verify that specialties is correct\", function () {",
													"    const specialties = [",
													"            \"Cow\",",
													"            \"Sheep\",",
													"            \"Pig\"",
													"        ];",
													"    pm.expect(responseJson.specialties).to.eql(specialties);",
													"});",
													"",
													"pm.test(\"Verify that picture.id is correct\", function () {",
													"    const picture_id = \"picture25\";",
													"    pm.expect(responseJson.picture.id).to.eql(picture_id);",
													"});",
													"",
													"pm.test(\"Verify that picture.name is correct\", function () {",
													"    const picture_name = \"picture of Alice\";",
													"    pm.expect(responseJson.picture.name).to.eql(picture_name);",
													"});",
													"",
													"pm.test(\"Verify that picture.type is correct\", function () {",
													"    const picture_type = \"Farmer\";",
													"    pm.expect(responseJson.picture.type).to.eql(picture_type);",
													"});",
													"",
													"pm.test(\"Verify that picture.url is correct\", function () {",
													"    const picture_url = \"/pictures/farmers/picture25.png\";",
													"    pm.expect(responseJson.picture.url).to.eql(picture_url);",
													"});",
													"",
													"pm.test(\"Verify that status is correct\", function () {",
													"    const status = \"present\";",
													"    pm.expect(responseJson.status).to.eql(status);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farmers/{{farmer_id}}",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"{{farmer_id}}"
											]
										},
										"description": "Delete a farmer"
									},
									"response": []
								},
								{
									"name": "Get a farmer by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"farmer not found for id farmer5\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farmers/farmer5",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"farmer5"
											]
										},
										"description": "Get a farmer by id"
									},
									"response": []
								},
								{
									"name": "Teardown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"",
													"// Verify teardown success",
													" pm.test(\"Check that status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify reset body is correct\", function () {",
													"  pm.expect(responseJson.applied).is.true;",
													"});",
													"",
													"// Reset variables",
													"pm.collectionVariables.unset(\"farmer_id\")",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farm/reset",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farm",
												"reset"
											]
										},
										"description": "Reset animals to the default values"
									},
									"response": []
								}
							],
							"description": "**Execute** Create a farmer\n\n**Then execute** Delete this farmer\n\n**Then execute** Get this farmer\n\n**Return** an error 404"
						},
						{
							"name": "Delete a farmer used by an animal",
							"item": [
								{
									"name": "Delete a farmer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init variables",
													"const responseJson = pm.response.json();",
													"pm.collectionVariables.set(\"farmer_id\", responseJson.id);",
													"",
													"// Tests",
													" pm.test(\"Check that status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Verify that error message is correct\", function () {",
													"\t  const error_msg = \"The farmer farmer1 is used by at least 1 animal\";",
													"    pm.expect(responseJson.error).to.eql(error_msg);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{farm_url}}/farmers/farmer1",
											"host": [
												"{{farm_url}}"
											],
											"path": [
												"farmers",
												"farmer1"
											]
										},
										"description": "Delete a farmer"
									},
									"response": []
								}
							],
							"description": "**Execute** Delete a farmer used by an animal\n\n**Return** an error 400"
						}
					],
					"description": "Integration tests for the api \"farmer\""
				}
			],
			"description": "Integration tests for the service \"Farm\""
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://postman-integration-testing.glitch.me/"
		}
	]
}